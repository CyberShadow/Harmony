### YamlMime:ManagedReference
items:
- uid: HarmonyLib.Harmony
  commentId: T:HarmonyLib.Harmony
  id: Harmony
  parent: HarmonyLib
  children:
  - HarmonyLib.Harmony.#ctor(System.String)
  - HarmonyLib.Harmony.DEBUG
  - HarmonyLib.Harmony.GetAllPatchedMethods
  - HarmonyLib.Harmony.GetPatchedMethods
  - HarmonyLib.Harmony.GetPatchInfo(System.Reflection.MethodBase)
  - HarmonyLib.Harmony.HasAnyPatches(System.String)
  - HarmonyLib.Harmony.Id
  - HarmonyLib.Harmony.Patch(System.Reflection.MethodBase,HarmonyLib.HarmonyMethod,HarmonyLib.HarmonyMethod,HarmonyLib.HarmonyMethod,HarmonyLib.HarmonyMethod)
  - HarmonyLib.Harmony.PatchAll
  - HarmonyLib.Harmony.PatchAll(System.Reflection.Assembly)
  - HarmonyLib.Harmony.ProcessorForAnnotatedClass(System.Type)
  - HarmonyLib.Harmony.ReversePatch(System.Reflection.MethodBase,HarmonyLib.HarmonyMethod,System.Reflection.MethodInfo)
  - HarmonyLib.Harmony.Unpatch(System.Reflection.MethodBase,HarmonyLib.HarmonyPatchType,System.String)
  - HarmonyLib.Harmony.Unpatch(System.Reflection.MethodBase,System.Reflection.MethodInfo)
  - HarmonyLib.Harmony.UnpatchAll(System.String)
  - HarmonyLib.Harmony.VersionInfo(System.Version@)
  langs:
  - csharp
  - vb
  name: Harmony
  nameWithType: Harmony
  fullName: HarmonyLib.Harmony
  type: Class
  source:
    remote:
      path: Harmony/Public/Harmony.cs
      branch: test-docs
      repo: git@github.com:pardeike/Harmony.git
    id: Harmony
    path: ../Public/Harmony.cs
    startLine: 9
  assemblies:
  - 0Harmony
  namespace: HarmonyLib
  summary: The Harmony instance is the main entry to Harmony. After creating one with an unique identifier, it is used to patch and query the current application domain
  example: []
  syntax:
    content: public class Harmony
    content.vb: Public Class Harmony
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: HarmonyLib.Harmony.Id
  commentId: P:HarmonyLib.Harmony.Id
  id: Id
  parent: HarmonyLib.Harmony
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: Harmony.Id
  fullName: HarmonyLib.Harmony.Id
  type: Property
  source:
    remote:
      path: Harmony/Public/Harmony.cs
      branch: test-docs
      repo: git@github.com:pardeike/Harmony.git
    id: Id
    path: ../Public/Harmony.cs
    startLine: 12
  assemblies:
  - 0Harmony
  namespace: HarmonyLib
  summary: The unique identifier
  example: []
  syntax:
    content: public string Id { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Id As String
  overload: HarmonyLib.Harmony.Id*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: HarmonyLib.Harmony.DEBUG
  commentId: F:HarmonyLib.Harmony.DEBUG
  id: DEBUG
  parent: HarmonyLib.Harmony
  langs:
  - csharp
  - vb
  name: DEBUG
  nameWithType: Harmony.DEBUG
  fullName: HarmonyLib.Harmony.DEBUG
  type: Field
  source:
    remote:
      path: Harmony/Public/Harmony.cs
      branch: test-docs
      repo: git@github.com:pardeike/Harmony.git
    id: DEBUG
    path: ../Public/Harmony.cs
    startLine: 15
  assemblies:
  - 0Harmony
  namespace: HarmonyLib
  summary: Set to true before instantiating Harmony to debug Harmony
  example: []
  syntax:
    content: public static bool DEBUG
    return:
      type: System.Boolean
    content.vb: Public Shared DEBUG As Boolean
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: HarmonyLib.Harmony.#ctor(System.String)
  commentId: M:HarmonyLib.Harmony.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: HarmonyLib.Harmony
  langs:
  - csharp
  - vb
  name: Harmony(String)
  nameWithType: Harmony.Harmony(String)
  fullName: HarmonyLib.Harmony.Harmony(System.String)
  type: Constructor
  source:
    remote:
      path: Harmony/Public/Harmony.cs
      branch: test-docs
      repo: git@github.com:pardeike/Harmony.git
    id: .ctor
    path: ../Public/Harmony.cs
    startLine: 21
  assemblies:
  - 0Harmony
  namespace: HarmonyLib
  summary: Creates a new Harmony instance
  example: []
  syntax:
    content: public Harmony(string id)
    parameters:
    - id: id
      type: System.String
      description: A unique identifier
    content.vb: Public Sub New(id As String)
  overload: HarmonyLib.Harmony.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: HarmonyLib.Harmony.PatchAll
  commentId: M:HarmonyLib.Harmony.PatchAll
  id: PatchAll
  parent: HarmonyLib.Harmony
  langs:
  - csharp
  - vb
  name: PatchAll()
  nameWithType: Harmony.PatchAll()
  fullName: HarmonyLib.Harmony.PatchAll()
  type: Method
  source:
    remote:
      path: Harmony/Public/Harmony.cs
      branch: test-docs
      repo: git@github.com:pardeike/Harmony.git
    id: PatchAll
    path: ../Public/Harmony.cs
    startLine: 48
  assemblies:
  - 0Harmony
  namespace: HarmonyLib
  summary: Searches current assembly for Harmony annotations and uses them to create patches
  example: []
  syntax:
    content: public void PatchAll()
    content.vb: Public Sub PatchAll
  overload: HarmonyLib.Harmony.PatchAll*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: HarmonyLib.Harmony.ProcessorForAnnotatedClass(System.Type)
  commentId: M:HarmonyLib.Harmony.ProcessorForAnnotatedClass(System.Type)
  id: ProcessorForAnnotatedClass(System.Type)
  parent: HarmonyLib.Harmony
  langs:
  - csharp
  - vb
  name: ProcessorForAnnotatedClass(Type)
  nameWithType: Harmony.ProcessorForAnnotatedClass(Type)
  fullName: HarmonyLib.Harmony.ProcessorForAnnotatedClass(System.Type)
  type: Method
  source:
    remote:
      path: Harmony/Public/Harmony.cs
      branch: test-docs
      repo: git@github.com:pardeike/Harmony.git
    id: ProcessorForAnnotatedClass
    path: ../Public/Harmony.cs
    startLine: 58
  assemblies:
  - 0Harmony
  namespace: HarmonyLib
  summary: Create a patch processor from an annotated class
  example: []
  syntax:
    content: public PatchClassProcessor ProcessorForAnnotatedClass(Type type)
    parameters:
    - id: type
      type: System.Type
      description: The class
    return:
      type: HarmonyLib.PatchClassProcessor
    content.vb: Public Function ProcessorForAnnotatedClass(type As Type) As PatchClassProcessor
  overload: HarmonyLib.Harmony.ProcessorForAnnotatedClass*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: HarmonyLib.Harmony.PatchAll(System.Reflection.Assembly)
  commentId: M:HarmonyLib.Harmony.PatchAll(System.Reflection.Assembly)
  id: PatchAll(System.Reflection.Assembly)
  parent: HarmonyLib.Harmony
  langs:
  - csharp
  - vb
  name: PatchAll(Assembly)
  nameWithType: Harmony.PatchAll(Assembly)
  fullName: HarmonyLib.Harmony.PatchAll(System.Reflection.Assembly)
  type: Method
  source:
    remote:
      path: Harmony/Public/Harmony.cs
      branch: test-docs
      repo: git@github.com:pardeike/Harmony.git
    id: PatchAll
    path: ../Public/Harmony.cs
    startLine: 66
  assemblies:
  - 0Harmony
  namespace: HarmonyLib
  summary: Searches an assembly for Harmony annotations and uses them to create patches
  example: []
  syntax:
    content: public void PatchAll(Assembly assembly)
    parameters:
    - id: assembly
      type: System.Reflection.Assembly
      description: The assembly
    content.vb: Public Sub PatchAll(assembly As Assembly)
  overload: HarmonyLib.Harmony.PatchAll*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: HarmonyLib.Harmony.Patch(System.Reflection.MethodBase,HarmonyLib.HarmonyMethod,HarmonyLib.HarmonyMethod,HarmonyLib.HarmonyMethod,HarmonyLib.HarmonyMethod)
  commentId: M:HarmonyLib.Harmony.Patch(System.Reflection.MethodBase,HarmonyLib.HarmonyMethod,HarmonyLib.HarmonyMethod,HarmonyLib.HarmonyMethod,HarmonyLib.HarmonyMethod)
  id: Patch(System.Reflection.MethodBase,HarmonyLib.HarmonyMethod,HarmonyLib.HarmonyMethod,HarmonyLib.HarmonyMethod,HarmonyLib.HarmonyMethod)
  parent: HarmonyLib.Harmony
  langs:
  - csharp
  - vb
  name: Patch(MethodBase, HarmonyMethod, HarmonyMethod, HarmonyMethod, HarmonyMethod)
  nameWithType: Harmony.Patch(MethodBase, HarmonyMethod, HarmonyMethod, HarmonyMethod, HarmonyMethod)
  fullName: HarmonyLib.Harmony.Patch(System.Reflection.MethodBase, HarmonyLib.HarmonyMethod, HarmonyLib.HarmonyMethod, HarmonyLib.HarmonyMethod, HarmonyLib.HarmonyMethod)
  type: Method
  source:
    remote:
      path: Harmony/Public/Harmony.cs
      branch: test-docs
      repo: git@github.com:pardeike/Harmony.git
    id: Patch
    path: ../Public/Harmony.cs
    startLine: 79
  assemblies:
  - 0Harmony
  namespace: HarmonyLib
  summary: Creates patches by manually specifying the methods
  example: []
  syntax:
    content: public MethodInfo Patch(MethodBase original, HarmonyMethod prefix = null, HarmonyMethod postfix = null, HarmonyMethod transpiler = null, HarmonyMethod finalizer = null)
    parameters:
    - id: original
      type: System.Reflection.MethodBase
      description: The original method/constructor
    - id: prefix
      type: HarmonyLib.HarmonyMethod
      description: An optional prefix method wrapped in a HarmonyMethod object
    - id: postfix
      type: HarmonyLib.HarmonyMethod
      description: An optional postfix method wrapped in a HarmonyMethod object
    - id: transpiler
      type: HarmonyLib.HarmonyMethod
      description: An optional transpiler method wrapped in a HarmonyMethod object
    - id: finalizer
      type: HarmonyLib.HarmonyMethod
      description: An optional finalizer method wrapped in a HarmonyMethod object
    return:
      type: System.Reflection.MethodInfo
      description: The dynamic method that was created to patch the original method
    content.vb: Public Function Patch(original As MethodBase, prefix As HarmonyMethod = Nothing, postfix As HarmonyMethod = Nothing, transpiler As HarmonyMethod = Nothing, finalizer As HarmonyMethod = Nothing) As MethodInfo
  overload: HarmonyLib.Harmony.Patch*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: HarmonyLib.Harmony.ReversePatch(System.Reflection.MethodBase,HarmonyLib.HarmonyMethod,System.Reflection.MethodInfo)
  commentId: M:HarmonyLib.Harmony.ReversePatch(System.Reflection.MethodBase,HarmonyLib.HarmonyMethod,System.Reflection.MethodInfo)
  id: ReversePatch(System.Reflection.MethodBase,HarmonyLib.HarmonyMethod,System.Reflection.MethodInfo)
  parent: HarmonyLib.Harmony
  langs:
  - csharp
  - vb
  name: ReversePatch(MethodBase, HarmonyMethod, MethodInfo)
  nameWithType: Harmony.ReversePatch(MethodBase, HarmonyMethod, MethodInfo)
  fullName: HarmonyLib.Harmony.ReversePatch(System.Reflection.MethodBase, HarmonyLib.HarmonyMethod, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: Harmony/Public/Harmony.cs
      branch: test-docs
      repo: git@github.com:pardeike/Harmony.git
    id: ReversePatch
    path: ../Public/Harmony.cs
    startLine: 93
  assemblies:
  - 0Harmony
  namespace: HarmonyLib
  summary: Patches a foreign method onto a stub method of yours and optionally applies transpilers during the process
  example: []
  syntax:
    content: public MethodInfo ReversePatch(MethodBase original, HarmonyMethod standin, MethodInfo transpiler = null)
    parameters:
    - id: original
      type: System.Reflection.MethodBase
      description: The original method/constructor you want to duplicate
    - id: standin
      type: HarmonyLib.HarmonyMethod
      description: Your stub method that will become the original. Needs to have the correct signature (either original or whatever your transpilers generates)
    - id: transpiler
      type: System.Reflection.MethodInfo
      description: An optional transpiler that will be applied during the process
    return:
      type: System.Reflection.MethodInfo
    content.vb: Public Function ReversePatch(original As MethodBase, standin As HarmonyMethod, transpiler As MethodInfo = Nothing) As MethodInfo
  overload: HarmonyLib.Harmony.ReversePatch*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: HarmonyLib.Harmony.UnpatchAll(System.String)
  commentId: M:HarmonyLib.Harmony.UnpatchAll(System.String)
  id: UnpatchAll(System.String)
  parent: HarmonyLib.Harmony
  langs:
  - csharp
  - vb
  name: UnpatchAll(String)
  nameWithType: Harmony.UnpatchAll(String)
  fullName: HarmonyLib.Harmony.UnpatchAll(System.String)
  type: Method
  source:
    remote:
      path: Harmony/Public/Harmony.cs
      branch: test-docs
      repo: git@github.com:pardeike/Harmony.git
    id: UnpatchAll
    path: ../Public/Harmony.cs
    startLine: 102
  assemblies:
  - 0Harmony
  namespace: HarmonyLib
  summary: Unpatches methods
  remarks: This method could be static if it wasn&apos;t for the fact that unpatching creates a new replacement method that contains your harmony ID
  example: []
  syntax:
    content: public void UnpatchAll(string harmonyID = null)
    parameters:
    - id: harmonyID
      type: System.String
      description: The optional Harmony ID to restrict unpatching to a specific instance
    content.vb: Public Sub UnpatchAll(harmonyID As String = Nothing)
  overload: HarmonyLib.Harmony.UnpatchAll*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: HarmonyLib.Harmony.Unpatch(System.Reflection.MethodBase,HarmonyLib.HarmonyPatchType,System.String)
  commentId: M:HarmonyLib.Harmony.Unpatch(System.Reflection.MethodBase,HarmonyLib.HarmonyPatchType,System.String)
  id: Unpatch(System.Reflection.MethodBase,HarmonyLib.HarmonyPatchType,System.String)
  parent: HarmonyLib.Harmony
  langs:
  - csharp
  - vb
  name: Unpatch(MethodBase, HarmonyPatchType, String)
  nameWithType: Harmony.Unpatch(MethodBase, HarmonyPatchType, String)
  fullName: HarmonyLib.Harmony.Unpatch(System.Reflection.MethodBase, HarmonyLib.HarmonyPatchType, System.String)
  type: Method
  source:
    remote:
      path: Harmony/Public/Harmony.cs
      branch: test-docs
      repo: git@github.com:pardeike/Harmony.git
    id: Unpatch
    path: ../Public/Harmony.cs
    startLine: 122
  assemblies:
  - 0Harmony
  namespace: HarmonyLib
  summary: Unpatches a method
  example: []
  syntax:
    content: public void Unpatch(MethodBase original, HarmonyPatchType type, string harmonyID = null)
    parameters:
    - id: original
      type: System.Reflection.MethodBase
      description: The original method
    - id: type
      type: HarmonyLib.HarmonyPatchType
      description: The patch type
    - id: harmonyID
      type: System.String
      description: The optional Harmony ID to restrict unpatching to a specific instance
    content.vb: Public Sub Unpatch(original As MethodBase, type As HarmonyPatchType, harmonyID As String = Nothing)
  overload: HarmonyLib.Harmony.Unpatch*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: HarmonyLib.Harmony.Unpatch(System.Reflection.MethodBase,System.Reflection.MethodInfo)
  commentId: M:HarmonyLib.Harmony.Unpatch(System.Reflection.MethodBase,System.Reflection.MethodInfo)
  id: Unpatch(System.Reflection.MethodBase,System.Reflection.MethodInfo)
  parent: HarmonyLib.Harmony
  langs:
  - csharp
  - vb
  name: Unpatch(MethodBase, MethodInfo)
  nameWithType: Harmony.Unpatch(MethodBase, MethodInfo)
  fullName: HarmonyLib.Harmony.Unpatch(System.Reflection.MethodBase, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: Harmony/Public/Harmony.cs
      branch: test-docs
      repo: git@github.com:pardeike/Harmony.git
    id: Unpatch
    path: ../Public/Harmony.cs
    startLine: 132
  assemblies:
  - 0Harmony
  namespace: HarmonyLib
  summary: Unpatches a method
  example: []
  syntax:
    content: public void Unpatch(MethodBase original, MethodInfo patch)
    parameters:
    - id: original
      type: System.Reflection.MethodBase
      description: The original method
    - id: patch
      type: System.Reflection.MethodInfo
      description: The patch method to remove
    content.vb: Public Sub Unpatch(original As MethodBase, patch As MethodInfo)
  overload: HarmonyLib.Harmony.Unpatch*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: HarmonyLib.Harmony.HasAnyPatches(System.String)
  commentId: M:HarmonyLib.Harmony.HasAnyPatches(System.String)
  id: HasAnyPatches(System.String)
  parent: HarmonyLib.Harmony
  langs:
  - csharp
  - vb
  name: HasAnyPatches(String)
  nameWithType: Harmony.HasAnyPatches(String)
  fullName: HarmonyLib.Harmony.HasAnyPatches(System.String)
  type: Method
  source:
    remote:
      path: Harmony/Public/Harmony.cs
      branch: test-docs
      repo: git@github.com:pardeike/Harmony.git
    id: HasAnyPatches
    path: ../Public/Harmony.cs
    startLine: 142
  assemblies:
  - 0Harmony
  namespace: HarmonyLib
  summary: Test for patches from a specific Harmony ID
  example: []
  syntax:
    content: public static bool HasAnyPatches(string harmonyID)
    parameters:
    - id: harmonyID
      type: System.String
      description: The Harmony ID
    return:
      type: System.Boolean
      description: True if patches for this ID exist
    content.vb: Public Shared Function HasAnyPatches(harmonyID As String) As Boolean
  overload: HarmonyLib.Harmony.HasAnyPatches*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: HarmonyLib.Harmony.GetPatchInfo(System.Reflection.MethodBase)
  commentId: M:HarmonyLib.Harmony.GetPatchInfo(System.Reflection.MethodBase)
  id: GetPatchInfo(System.Reflection.MethodBase)
  parent: HarmonyLib.Harmony
  langs:
  - csharp
  - vb
  name: GetPatchInfo(MethodBase)
  nameWithType: Harmony.GetPatchInfo(MethodBase)
  fullName: HarmonyLib.Harmony.GetPatchInfo(System.Reflection.MethodBase)
  type: Method
  source:
    remote:
      path: Harmony/Public/Harmony.cs
      branch: test-docs
      repo: git@github.com:pardeike/Harmony.git
    id: GetPatchInfo
    path: ../Public/Harmony.cs
    startLine: 153
  assemblies:
  - 0Harmony
  namespace: HarmonyLib
  summary: Gets patch information for a given original method
  example: []
  syntax:
    content: public static Patches GetPatchInfo(MethodBase method)
    parameters:
    - id: method
      type: System.Reflection.MethodBase
      description: The original method
    return:
      type: HarmonyLib.Patches
      description: The patch information
    content.vb: Public Shared Function GetPatchInfo(method As MethodBase) As Patches
  overload: HarmonyLib.Harmony.GetPatchInfo*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: HarmonyLib.Harmony.GetPatchedMethods
  commentId: M:HarmonyLib.Harmony.GetPatchedMethods
  id: GetPatchedMethods
  parent: HarmonyLib.Harmony
  langs:
  - csharp
  - vb
  name: GetPatchedMethods()
  nameWithType: Harmony.GetPatchedMethods()
  fullName: HarmonyLib.Harmony.GetPatchedMethods()
  type: Method
  source:
    remote:
      path: Harmony/Public/Harmony.cs
      branch: test-docs
      repo: git@github.com:pardeike/Harmony.git
    id: GetPatchedMethods
    path: ../Public/Harmony.cs
    startLine: 161
  assemblies:
  - 0Harmony
  namespace: HarmonyLib
  summary: Gets the methods this instance has patched
  example: []
  syntax:
    content: public IEnumerable<MethodBase> GetPatchedMethods()
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.MethodBase}
      description: An enumeration of original methods
    content.vb: Public Function GetPatchedMethods As IEnumerable(Of MethodBase)
  overload: HarmonyLib.Harmony.GetPatchedMethods*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: HarmonyLib.Harmony.GetAllPatchedMethods
  commentId: M:HarmonyLib.Harmony.GetAllPatchedMethods
  id: GetAllPatchedMethods
  parent: HarmonyLib.Harmony
  langs:
  - csharp
  - vb
  name: GetAllPatchedMethods()
  nameWithType: Harmony.GetAllPatchedMethods()
  fullName: HarmonyLib.Harmony.GetAllPatchedMethods()
  type: Method
  source:
    remote:
      path: Harmony/Public/Harmony.cs
      branch: test-docs
      repo: git@github.com:pardeike/Harmony.git
    id: GetAllPatchedMethods
    path: ../Public/Harmony.cs
    startLine: 170
  assemblies:
  - 0Harmony
  namespace: HarmonyLib
  summary: Gets all patched original methods in the appdomain
  example: []
  syntax:
    content: public static IEnumerable<MethodBase> GetAllPatchedMethods()
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.MethodBase}
      description: An enumeration of patched original methods
    content.vb: Public Shared Function GetAllPatchedMethods As IEnumerable(Of MethodBase)
  overload: HarmonyLib.Harmony.GetAllPatchedMethods*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: HarmonyLib.Harmony.VersionInfo(System.Version@)
  commentId: M:HarmonyLib.Harmony.VersionInfo(System.Version@)
  id: VersionInfo(System.Version@)
  parent: HarmonyLib.Harmony
  langs:
  - csharp
  - vb
  name: VersionInfo(out Version)
  nameWithType: Harmony.VersionInfo(out Version)
  fullName: HarmonyLib.Harmony.VersionInfo(out System.Version)
  type: Method
  source:
    remote:
      path: Harmony/Public/Harmony.cs
      branch: test-docs
      repo: git@github.com:pardeike/Harmony.git
    id: VersionInfo
    path: ../Public/Harmony.cs
    startLine: 179
  assemblies:
  - 0Harmony
  namespace: HarmonyLib
  summary: Gets Harmony version for all active Harmony instances
  example: []
  syntax:
    content: public static Dictionary<string, Version> VersionInfo(out Version currentVersion)
    parameters:
    - id: currentVersion
      type: System.Version
      description: '[out] The current Harmony version'
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.Version}
      description: A dictionary containing assembly versions keyed by Harmony IDs
    content.vb: Public Shared Function VersionInfo(ByRef currentVersion As Version) As Dictionary(Of String, Version)
  overload: HarmonyLib.Harmony.VersionInfo*
  nameWithType.vb: Harmony.VersionInfo(ByRef Version)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: HarmonyLib.Harmony.VersionInfo(ByRef System.Version)
  name.vb: VersionInfo(ByRef Version)
references:
- uid: HarmonyLib
  commentId: N:HarmonyLib
  name: HarmonyLib
  nameWithType: HarmonyLib
  fullName: HarmonyLib
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: HarmonyLib.Harmony.Id*
  commentId: Overload:HarmonyLib.Harmony.Id
  name: Id
  nameWithType: Harmony.Id
  fullName: HarmonyLib.Harmony.Id
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: HarmonyLib.Harmony.#ctor*
  commentId: Overload:HarmonyLib.Harmony.#ctor
  name: Harmony
  nameWithType: Harmony.Harmony
  fullName: HarmonyLib.Harmony.Harmony
- uid: HarmonyLib.Harmony.PatchAll*
  commentId: Overload:HarmonyLib.Harmony.PatchAll
  name: PatchAll
  nameWithType: Harmony.PatchAll
  fullName: HarmonyLib.Harmony.PatchAll
- uid: HarmonyLib.Harmony.ProcessorForAnnotatedClass*
  commentId: Overload:HarmonyLib.Harmony.ProcessorForAnnotatedClass
  name: ProcessorForAnnotatedClass
  nameWithType: Harmony.ProcessorForAnnotatedClass
  fullName: HarmonyLib.Harmony.ProcessorForAnnotatedClass
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: HarmonyLib.PatchClassProcessor
  commentId: T:HarmonyLib.PatchClassProcessor
  parent: HarmonyLib
  name: PatchClassProcessor
  nameWithType: PatchClassProcessor
  fullName: HarmonyLib.PatchClassProcessor
- uid: System.Reflection.Assembly
  commentId: T:System.Reflection.Assembly
  parent: System.Reflection
  isExternal: true
  name: Assembly
  nameWithType: Assembly
  fullName: System.Reflection.Assembly
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: true
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: HarmonyLib.Harmony.Patch*
  commentId: Overload:HarmonyLib.Harmony.Patch
  name: Patch
  nameWithType: Harmony.Patch
  fullName: HarmonyLib.Harmony.Patch
- uid: System.Reflection.MethodBase
  commentId: T:System.Reflection.MethodBase
  parent: System.Reflection
  isExternal: true
  name: MethodBase
  nameWithType: MethodBase
  fullName: System.Reflection.MethodBase
- uid: HarmonyLib.HarmonyMethod
  commentId: T:HarmonyLib.HarmonyMethod
  parent: HarmonyLib
  name: HarmonyMethod
  nameWithType: HarmonyMethod
  fullName: HarmonyLib.HarmonyMethod
- uid: System.Reflection.MethodInfo
  commentId: T:System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: HarmonyLib.Harmony.ReversePatch*
  commentId: Overload:HarmonyLib.Harmony.ReversePatch
  name: ReversePatch
  nameWithType: Harmony.ReversePatch
  fullName: HarmonyLib.Harmony.ReversePatch
- uid: HarmonyLib.Harmony.UnpatchAll*
  commentId: Overload:HarmonyLib.Harmony.UnpatchAll
  name: UnpatchAll
  nameWithType: Harmony.UnpatchAll
  fullName: HarmonyLib.Harmony.UnpatchAll
- uid: HarmonyLib.Harmony.Unpatch*
  commentId: Overload:HarmonyLib.Harmony.Unpatch
  name: Unpatch
  nameWithType: Harmony.Unpatch
  fullName: HarmonyLib.Harmony.Unpatch
- uid: HarmonyLib.HarmonyPatchType
  commentId: T:HarmonyLib.HarmonyPatchType
  parent: HarmonyLib
  name: HarmonyPatchType
  nameWithType: HarmonyPatchType
  fullName: HarmonyLib.HarmonyPatchType
- uid: HarmonyLib.Harmony.HasAnyPatches*
  commentId: Overload:HarmonyLib.Harmony.HasAnyPatches
  name: HasAnyPatches
  nameWithType: Harmony.HasAnyPatches
  fullName: HarmonyLib.Harmony.HasAnyPatches
- uid: HarmonyLib.Harmony.GetPatchInfo*
  commentId: Overload:HarmonyLib.Harmony.GetPatchInfo
  name: GetPatchInfo
  nameWithType: Harmony.GetPatchInfo
  fullName: HarmonyLib.Harmony.GetPatchInfo
- uid: HarmonyLib.Patches
  commentId: T:HarmonyLib.Patches
  parent: HarmonyLib
  name: Patches
  nameWithType: Patches
  fullName: HarmonyLib.Patches
- uid: HarmonyLib.Harmony.GetPatchedMethods*
  commentId: Overload:HarmonyLib.Harmony.GetPatchedMethods
  name: GetPatchedMethods
  nameWithType: Harmony.GetPatchedMethods
  fullName: HarmonyLib.Harmony.GetPatchedMethods
- uid: System.Collections.Generic.IEnumerable{System.Reflection.MethodBase}
  commentId: T:System.Collections.Generic.IEnumerable{System.Reflection.MethodBase}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<MethodBase>
  nameWithType: IEnumerable<MethodBase>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.MethodBase>
  nameWithType.vb: IEnumerable(Of MethodBase)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.MethodBase)
  name.vb: IEnumerable(Of MethodBase)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.MethodBase
    name: MethodBase
    nameWithType: MethodBase
    fullName: System.Reflection.MethodBase
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.MethodBase
    name: MethodBase
    nameWithType: MethodBase
    fullName: System.Reflection.MethodBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: HarmonyLib.Harmony.GetAllPatchedMethods*
  commentId: Overload:HarmonyLib.Harmony.GetAllPatchedMethods
  name: GetAllPatchedMethods
  nameWithType: Harmony.GetAllPatchedMethods
  fullName: HarmonyLib.Harmony.GetAllPatchedMethods
- uid: HarmonyLib.Harmony.VersionInfo*
  commentId: Overload:HarmonyLib.Harmony.VersionInfo
  name: VersionInfo
  nameWithType: Harmony.VersionInfo
  fullName: HarmonyLib.Harmony.VersionInfo
- uid: System.Version
  commentId: T:System.Version
  parent: System
  isExternal: true
  name: Version
  nameWithType: Version
  fullName: System.Version
- uid: System.Collections.Generic.Dictionary{System.String,System.Version}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.Version}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, Version>
  nameWithType: Dictionary<String, Version>
  fullName: System.Collections.Generic.Dictionary<System.String, System.Version>
  nameWithType.vb: Dictionary(Of String, Version)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.Version)
  name.vb: Dictionary(Of String, Version)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Version
    name: Version
    nameWithType: Version
    fullName: System.Version
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Version
    name: Version
    nameWithType: Version
    fullName: System.Version
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
