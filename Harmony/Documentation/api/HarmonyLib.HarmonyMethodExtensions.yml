### YamlMime:ManagedReference
items:
- uid: HarmonyLib.HarmonyMethodExtensions
  commentId: T:HarmonyLib.HarmonyMethodExtensions
  id: HarmonyMethodExtensions
  parent: HarmonyLib
  children:
  - HarmonyLib.HarmonyMethodExtensions.Clone(HarmonyLib.HarmonyMethod)
  - HarmonyLib.HarmonyMethodExtensions.CopyTo(HarmonyLib.HarmonyMethod,HarmonyLib.HarmonyMethod)
  - HarmonyLib.HarmonyMethodExtensions.GetFromMethod(System.Reflection.MethodBase)
  - HarmonyLib.HarmonyMethodExtensions.GetFromType(System.Type)
  - HarmonyLib.HarmonyMethodExtensions.GetMergedFromMethod(System.Reflection.MethodBase)
  - HarmonyLib.HarmonyMethodExtensions.GetMergedFromType(System.Type)
  - HarmonyLib.HarmonyMethodExtensions.Merge(HarmonyLib.HarmonyMethod,HarmonyLib.HarmonyMethod)
  langs:
  - csharp
  - vb
  name: HarmonyMethodExtensions
  nameWithType: HarmonyMethodExtensions
  fullName: HarmonyLib.HarmonyMethodExtensions
  type: Class
  source:
    remote:
      path: Harmony/Public/HarmonyMethod.cs
      branch: master
      repo: git@github.com:pardeike/Harmony.git
    id: HarmonyMethodExtensions
    path: ../Public/HarmonyMethod.cs
    startLine: 130
  assemblies:
  - 0Harmony
  namespace: HarmonyLib
  summary: Annotation extensions
  example: []
  syntax:
    content: public static class HarmonyMethodExtensions
    content.vb: Public Module HarmonyMethodExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: HarmonyLib.HarmonyMethodExtensions.CopyTo(HarmonyLib.HarmonyMethod,HarmonyLib.HarmonyMethod)
  commentId: M:HarmonyLib.HarmonyMethodExtensions.CopyTo(HarmonyLib.HarmonyMethod,HarmonyLib.HarmonyMethod)
  id: CopyTo(HarmonyLib.HarmonyMethod,HarmonyLib.HarmonyMethod)
  isExtensionMethod: true
  parent: HarmonyLib.HarmonyMethodExtensions
  langs:
  - csharp
  - vb
  name: CopyTo(HarmonyMethod, HarmonyMethod)
  nameWithType: HarmonyMethodExtensions.CopyTo(HarmonyMethod, HarmonyMethod)
  fullName: HarmonyLib.HarmonyMethodExtensions.CopyTo(HarmonyLib.HarmonyMethod, HarmonyLib.HarmonyMethod)
  type: Method
  source:
    remote:
      path: Harmony/Public/HarmonyMethod.cs
      branch: master
      repo: git@github.com:pardeike/Harmony.git
    id: CopyTo
    path: ../Public/HarmonyMethod.cs
    startLine: 148
  assemblies:
  - 0Harmony
  namespace: HarmonyLib
  summary: Copies annotation information
  example: []
  syntax:
    content: public static void CopyTo(this HarmonyMethod from, HarmonyMethod to)
    parameters:
    - id: from
      type: HarmonyLib.HarmonyMethod
      description: from
    - id: to
      type: HarmonyLib.HarmonyMethod
      description: to
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub CopyTo(from As HarmonyMethod, to As HarmonyMethod)
  overload: HarmonyLib.HarmonyMethodExtensions.CopyTo*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: HarmonyLib.HarmonyMethodExtensions.Clone(HarmonyLib.HarmonyMethod)
  commentId: M:HarmonyLib.HarmonyMethodExtensions.Clone(HarmonyLib.HarmonyMethod)
  id: Clone(HarmonyLib.HarmonyMethod)
  isExtensionMethod: true
  parent: HarmonyLib.HarmonyMethodExtensions
  langs:
  - csharp
  - vb
  name: Clone(HarmonyMethod)
  nameWithType: HarmonyMethodExtensions.Clone(HarmonyMethod)
  fullName: HarmonyLib.HarmonyMethodExtensions.Clone(HarmonyLib.HarmonyMethod)
  type: Method
  source:
    remote:
      path: Harmony/Public/HarmonyMethod.cs
      branch: master
      repo: git@github.com:pardeike/Harmony.git
    id: Clone
    path: ../Public/HarmonyMethod.cs
    startLine: 165
  assemblies:
  - 0Harmony
  namespace: HarmonyLib
  summary: Clones an annotation
  example: []
  syntax:
    content: public static HarmonyMethod Clone(this HarmonyMethod original)
    parameters:
    - id: original
      type: HarmonyLib.HarmonyMethod
      description: The annotation to clone
    return:
      type: HarmonyLib.HarmonyMethod
      description: A copy of the annotation
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Clone(original As HarmonyMethod) As HarmonyMethod
  overload: HarmonyLib.HarmonyMethodExtensions.Clone*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: HarmonyLib.HarmonyMethodExtensions.Merge(HarmonyLib.HarmonyMethod,HarmonyLib.HarmonyMethod)
  commentId: M:HarmonyLib.HarmonyMethodExtensions.Merge(HarmonyLib.HarmonyMethod,HarmonyLib.HarmonyMethod)
  id: Merge(HarmonyLib.HarmonyMethod,HarmonyLib.HarmonyMethod)
  isExtensionMethod: true
  parent: HarmonyLib.HarmonyMethodExtensions
  langs:
  - csharp
  - vb
  name: Merge(HarmonyMethod, HarmonyMethod)
  nameWithType: HarmonyMethodExtensions.Merge(HarmonyMethod, HarmonyMethod)
  fullName: HarmonyLib.HarmonyMethodExtensions.Merge(HarmonyLib.HarmonyMethod, HarmonyLib.HarmonyMethod)
  type: Method
  source:
    remote:
      path: Harmony/Public/HarmonyMethod.cs
      branch: master
      repo: git@github.com:pardeike/Harmony.git
    id: Merge
    path: ../Public/HarmonyMethod.cs
    startLine: 177
  assemblies:
  - 0Harmony
  namespace: HarmonyLib
  summary: Merges annotations
  example: []
  syntax:
    content: public static HarmonyMethod Merge(this HarmonyMethod master, HarmonyMethod detail)
    parameters:
    - id: master
      type: HarmonyLib.HarmonyMethod
      description: The master
    - id: detail
      type: HarmonyLib.HarmonyMethod
      description: The detail
    return:
      type: HarmonyLib.HarmonyMethod
      description: A new, merged copy
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Merge(master As HarmonyMethod, detail As HarmonyMethod) As HarmonyMethod
  overload: HarmonyLib.HarmonyMethodExtensions.Merge*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: HarmonyLib.HarmonyMethodExtensions.GetFromType(System.Type)
  commentId: M:HarmonyLib.HarmonyMethodExtensions.GetFromType(System.Type)
  id: GetFromType(System.Type)
  parent: HarmonyLib.HarmonyMethodExtensions
  langs:
  - csharp
  - vb
  name: GetFromType(Type)
  nameWithType: HarmonyMethodExtensions.GetFromType(Type)
  fullName: HarmonyLib.HarmonyMethodExtensions.GetFromType(System.Type)
  type: Method
  source:
    remote:
      path: Harmony/Public/HarmonyMethod.cs
      branch: master
      repo: git@github.com:pardeike/Harmony.git
    id: GetFromType
    path: ../Public/HarmonyMethod.cs
    startLine: 206
  assemblies:
  - 0Harmony
  namespace: HarmonyLib
  summary: Gets all annotations on a class
  example: []
  syntax:
    content: public static List<HarmonyMethod> GetFromType(Type type)
    parameters:
    - id: type
      type: System.Type
      description: The class
    return:
      type: System.Collections.Generic.List{HarmonyLib.HarmonyMethod}
      description: All annotations
    content.vb: Public Shared Function GetFromType(type As Type) As List(Of HarmonyMethod)
  overload: HarmonyLib.HarmonyMethodExtensions.GetFromType*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: HarmonyLib.HarmonyMethodExtensions.GetMergedFromType(System.Type)
  commentId: M:HarmonyLib.HarmonyMethodExtensions.GetMergedFromType(System.Type)
  id: GetMergedFromType(System.Type)
  parent: HarmonyLib.HarmonyMethodExtensions
  langs:
  - csharp
  - vb
  name: GetMergedFromType(Type)
  nameWithType: HarmonyMethodExtensions.GetMergedFromType(Type)
  fullName: HarmonyLib.HarmonyMethodExtensions.GetMergedFromType(System.Type)
  type: Method
  source:
    remote:
      path: Harmony/Public/HarmonyMethod.cs
      branch: master
      repo: git@github.com:pardeike/Harmony.git
    id: GetMergedFromType
    path: ../Public/HarmonyMethod.cs
    startLine: 218
  assemblies:
  - 0Harmony
  namespace: HarmonyLib
  summary: Gets all annotations on a class in merged form
  example: []
  syntax:
    content: public static HarmonyMethod GetMergedFromType(Type type)
    parameters:
    - id: type
      type: System.Type
      description: The class
    return:
      type: HarmonyLib.HarmonyMethod
      description: The merged HarmonyMethod
    content.vb: Public Shared Function GetMergedFromType(type As Type) As HarmonyMethod
  overload: HarmonyLib.HarmonyMethodExtensions.GetMergedFromType*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: HarmonyLib.HarmonyMethodExtensions.GetFromMethod(System.Reflection.MethodBase)
  commentId: M:HarmonyLib.HarmonyMethodExtensions.GetFromMethod(System.Reflection.MethodBase)
  id: GetFromMethod(System.Reflection.MethodBase)
  parent: HarmonyLib.HarmonyMethodExtensions
  langs:
  - csharp
  - vb
  name: GetFromMethod(MethodBase)
  nameWithType: HarmonyMethodExtensions.GetFromMethod(MethodBase)
  fullName: HarmonyLib.HarmonyMethodExtensions.GetFromMethod(System.Reflection.MethodBase)
  type: Method
  source:
    remote:
      path: Harmony/Public/HarmonyMethod.cs
      branch: master
      repo: git@github.com:pardeike/Harmony.git
    id: GetFromMethod
    path: ../Public/HarmonyMethod.cs
    startLine: 227
  assemblies:
  - 0Harmony
  namespace: HarmonyLib
  summary: Gets all annotations on a method
  example: []
  syntax:
    content: public static List<HarmonyMethod> GetFromMethod(MethodBase method)
    parameters:
    - id: method
      type: System.Reflection.MethodBase
      description: The method
    return:
      type: System.Collections.Generic.List{HarmonyLib.HarmonyMethod}
      description: All annotations
    content.vb: Public Shared Function GetFromMethod(method As MethodBase) As List(Of HarmonyMethod)
  overload: HarmonyLib.HarmonyMethodExtensions.GetFromMethod*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: HarmonyLib.HarmonyMethodExtensions.GetMergedFromMethod(System.Reflection.MethodBase)
  commentId: M:HarmonyLib.HarmonyMethodExtensions.GetMergedFromMethod(System.Reflection.MethodBase)
  id: GetMergedFromMethod(System.Reflection.MethodBase)
  parent: HarmonyLib.HarmonyMethodExtensions
  langs:
  - csharp
  - vb
  name: GetMergedFromMethod(MethodBase)
  nameWithType: HarmonyMethodExtensions.GetMergedFromMethod(MethodBase)
  fullName: HarmonyLib.HarmonyMethodExtensions.GetMergedFromMethod(System.Reflection.MethodBase)
  type: Method
  source:
    remote:
      path: Harmony/Public/HarmonyMethod.cs
      branch: master
      repo: git@github.com:pardeike/Harmony.git
    id: GetMergedFromMethod
    path: ../Public/HarmonyMethod.cs
    startLine: 239
  assemblies:
  - 0Harmony
  namespace: HarmonyLib
  summary: Gets all annotations on a method in merged form
  example: []
  syntax:
    content: public static HarmonyMethod GetMergedFromMethod(MethodBase method)
    parameters:
    - id: method
      type: System.Reflection.MethodBase
      description: The method
    return:
      type: HarmonyLib.HarmonyMethod
      description: The merged HarmonyMethod
    content.vb: Public Shared Function GetMergedFromMethod(method As MethodBase) As HarmonyMethod
  overload: HarmonyLib.HarmonyMethodExtensions.GetMergedFromMethod*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: HarmonyLib
  commentId: N:HarmonyLib
  name: HarmonyLib
  nameWithType: HarmonyLib
  fullName: HarmonyLib
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: HarmonyLib.HarmonyMethodExtensions.CopyTo*
  commentId: Overload:HarmonyLib.HarmonyMethodExtensions.CopyTo
  name: CopyTo
  nameWithType: HarmonyMethodExtensions.CopyTo
  fullName: HarmonyLib.HarmonyMethodExtensions.CopyTo
- uid: HarmonyLib.HarmonyMethod
  commentId: T:HarmonyLib.HarmonyMethod
  parent: HarmonyLib
  name: HarmonyMethod
  nameWithType: HarmonyMethod
  fullName: HarmonyLib.HarmonyMethod
- uid: HarmonyLib.HarmonyMethodExtensions.Clone*
  commentId: Overload:HarmonyLib.HarmonyMethodExtensions.Clone
  name: Clone
  nameWithType: HarmonyMethodExtensions.Clone
  fullName: HarmonyLib.HarmonyMethodExtensions.Clone
- uid: HarmonyLib.HarmonyMethodExtensions.Merge*
  commentId: Overload:HarmonyLib.HarmonyMethodExtensions.Merge
  name: Merge
  nameWithType: HarmonyMethodExtensions.Merge
  fullName: HarmonyLib.HarmonyMethodExtensions.Merge
- uid: HarmonyLib.HarmonyMethodExtensions.GetFromType*
  commentId: Overload:HarmonyLib.HarmonyMethodExtensions.GetFromType
  name: GetFromType
  nameWithType: HarmonyMethodExtensions.GetFromType
  fullName: HarmonyLib.HarmonyMethodExtensions.GetFromType
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Collections.Generic.List{HarmonyLib.HarmonyMethod}
  commentId: T:System.Collections.Generic.List{HarmonyLib.HarmonyMethod}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<HarmonyMethod>
  nameWithType: List<HarmonyMethod>
  fullName: System.Collections.Generic.List<HarmonyLib.HarmonyMethod>
  nameWithType.vb: List(Of HarmonyMethod)
  fullName.vb: System.Collections.Generic.List(Of HarmonyLib.HarmonyMethod)
  name.vb: List(Of HarmonyMethod)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: HarmonyLib.HarmonyMethod
    name: HarmonyMethod
    nameWithType: HarmonyMethod
    fullName: HarmonyLib.HarmonyMethod
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: HarmonyLib.HarmonyMethod
    name: HarmonyMethod
    nameWithType: HarmonyMethod
    fullName: HarmonyLib.HarmonyMethod
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: HarmonyLib.HarmonyMethodExtensions.GetMergedFromType*
  commentId: Overload:HarmonyLib.HarmonyMethodExtensions.GetMergedFromType
  name: GetMergedFromType
  nameWithType: HarmonyMethodExtensions.GetMergedFromType
  fullName: HarmonyLib.HarmonyMethodExtensions.GetMergedFromType
- uid: HarmonyLib.HarmonyMethodExtensions.GetFromMethod*
  commentId: Overload:HarmonyLib.HarmonyMethodExtensions.GetFromMethod
  name: GetFromMethod
  nameWithType: HarmonyMethodExtensions.GetFromMethod
  fullName: HarmonyLib.HarmonyMethodExtensions.GetFromMethod
- uid: System.Reflection.MethodBase
  commentId: T:System.Reflection.MethodBase
  parent: System.Reflection
  isExternal: true
  name: MethodBase
  nameWithType: MethodBase
  fullName: System.Reflection.MethodBase
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: true
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: HarmonyLib.HarmonyMethodExtensions.GetMergedFromMethod*
  commentId: Overload:HarmonyLib.HarmonyMethodExtensions.GetMergedFromMethod
  name: GetMergedFromMethod
  nameWithType: HarmonyMethodExtensions.GetMergedFromMethod
  fullName: HarmonyLib.HarmonyMethodExtensions.GetMergedFromMethod
