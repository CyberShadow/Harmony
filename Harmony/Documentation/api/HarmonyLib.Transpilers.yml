### YamlMime:ManagedReference
items:
- uid: HarmonyLib.Transpilers
  commentId: T:HarmonyLib.Transpilers
  id: Transpilers
  parent: HarmonyLib
  children:
  - HarmonyLib.Transpilers.DebugLogger(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.String)
  - HarmonyLib.Transpilers.Manipulator(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Func{HarmonyLib.CodeInstruction,System.Boolean},System.Action{HarmonyLib.CodeInstruction})
  - HarmonyLib.Transpilers.MethodReplacer(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.MethodBase,System.Reflection.MethodBase)
  langs:
  - csharp
  - vb
  name: Transpilers
  nameWithType: Transpilers
  fullName: HarmonyLib.Transpilers
  type: Class
  source:
    remote:
      path: Harmony/Public/Transpilers.cs
      branch: master
      repo: git@github.com:pardeike/Harmony.git
    id: Transpilers
    path: ../Public/Transpilers.cs
    startLine: 9
  assemblies:
  - 0Harmony
  namespace: HarmonyLib
  summary: A collection of commonly used transpilers
  example: []
  syntax:
    content: public static class Transpilers
    content.vb: Public Module Transpilers
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: HarmonyLib.Transpilers.MethodReplacer(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.MethodBase,System.Reflection.MethodBase)
  commentId: M:HarmonyLib.Transpilers.MethodReplacer(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.MethodBase,System.Reflection.MethodBase)
  id: MethodReplacer(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.MethodBase,System.Reflection.MethodBase)
  isExtensionMethod: true
  parent: HarmonyLib.Transpilers
  langs:
  - csharp
  - vb
  name: MethodReplacer(IEnumerable<CodeInstruction>, MethodBase, MethodBase)
  nameWithType: Transpilers.MethodReplacer(IEnumerable<CodeInstruction>, MethodBase, MethodBase)
  fullName: HarmonyLib.Transpilers.MethodReplacer(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction>, System.Reflection.MethodBase, System.Reflection.MethodBase)
  type: Method
  source:
    remote:
      path: Harmony/Public/Transpilers.cs
      branch: master
      repo: git@github.com:pardeike/Harmony.git
    id: MethodReplacer
    path: ../Public/Transpilers.cs
    startLine: 17
  assemblies:
  - 0Harmony
  namespace: HarmonyLib
  summary: A transpiler that replaces all occurrences of a given method with another one
  example: []
  syntax:
    content: public static IEnumerable<CodeInstruction> MethodReplacer(this IEnumerable<CodeInstruction> instructions, MethodBase from, MethodBase to)
    parameters:
    - id: instructions
      type: System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction}
      description: The instructions to act on
    - id: from
      type: System.Reflection.MethodBase
      description: Method or constructor to search for
    - id: to
      type: System.Reflection.MethodBase
      description: Method or constructor to replace with
    return:
      type: System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction}
      description: Modified instructions
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MethodReplacer(instructions As IEnumerable(Of CodeInstruction), from As MethodBase, to As MethodBase) As IEnumerable(Of CodeInstruction)
  overload: HarmonyLib.Transpilers.MethodReplacer*
  nameWithType.vb: Transpilers.MethodReplacer(IEnumerable(Of CodeInstruction), MethodBase, MethodBase)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: HarmonyLib.Transpilers.MethodReplacer(System.Collections.Generic.IEnumerable(Of HarmonyLib.CodeInstruction), System.Reflection.MethodBase, System.Reflection.MethodBase)
  name.vb: MethodReplacer(IEnumerable(Of CodeInstruction), MethodBase, MethodBase)
- uid: HarmonyLib.Transpilers.Manipulator(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Func{HarmonyLib.CodeInstruction,System.Boolean},System.Action{HarmonyLib.CodeInstruction})
  commentId: M:HarmonyLib.Transpilers.Manipulator(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Func{HarmonyLib.CodeInstruction,System.Boolean},System.Action{HarmonyLib.CodeInstruction})
  id: Manipulator(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Func{HarmonyLib.CodeInstruction,System.Boolean},System.Action{HarmonyLib.CodeInstruction})
  isExtensionMethod: true
  parent: HarmonyLib.Transpilers
  langs:
  - csharp
  - vb
  name: Manipulator(IEnumerable<CodeInstruction>, Func<CodeInstruction, Boolean>, Action<CodeInstruction>)
  nameWithType: Transpilers.Manipulator(IEnumerable<CodeInstruction>, Func<CodeInstruction, Boolean>, Action<CodeInstruction>)
  fullName: HarmonyLib.Transpilers.Manipulator(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction>, System.Func<HarmonyLib.CodeInstruction, System.Boolean>, System.Action<HarmonyLib.CodeInstruction>)
  type: Method
  source:
    remote:
      path: Harmony/Public/Transpilers.cs
      branch: master
      repo: git@github.com:pardeike/Harmony.git
    id: Manipulator
    path: ../Public/Transpilers.cs
    startLine: 42
  assemblies:
  - 0Harmony
  namespace: HarmonyLib
  summary: A transpiler that alters instructions that match a predicate by calling an action
  example: []
  syntax:
    content: public static IEnumerable<CodeInstruction> Manipulator(this IEnumerable<CodeInstruction> instructions, Func<CodeInstruction, bool> predicate, Action<CodeInstruction> action)
    parameters:
    - id: instructions
      type: System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction}
      description: The instructions to act on
    - id: predicate
      type: System.Func{HarmonyLib.CodeInstruction,System.Boolean}
      description: A predicate selecting the instructions to change
    - id: action
      type: System.Action{HarmonyLib.CodeInstruction}
      description: An action to apply to matching instructions
    return:
      type: System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction}
      description: Modified instructions
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Manipulator(instructions As IEnumerable(Of CodeInstruction), predicate As Func(Of CodeInstruction, Boolean), action As Action(Of CodeInstruction)) As IEnumerable(Of CodeInstruction)
  overload: HarmonyLib.Transpilers.Manipulator*
  nameWithType.vb: Transpilers.Manipulator(IEnumerable(Of CodeInstruction), Func(Of CodeInstruction, Boolean), Action(Of CodeInstruction))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: HarmonyLib.Transpilers.Manipulator(System.Collections.Generic.IEnumerable(Of HarmonyLib.CodeInstruction), System.Func(Of HarmonyLib.CodeInstruction, System.Boolean), System.Action(Of HarmonyLib.CodeInstruction))
  name.vb: Manipulator(IEnumerable(Of CodeInstruction), Func(Of CodeInstruction, Boolean), Action(Of CodeInstruction))
- uid: HarmonyLib.Transpilers.DebugLogger(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.String)
  commentId: M:HarmonyLib.Transpilers.DebugLogger(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.String)
  id: DebugLogger(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.String)
  isExtensionMethod: true
  parent: HarmonyLib.Transpilers
  langs:
  - csharp
  - vb
  name: DebugLogger(IEnumerable<CodeInstruction>, String)
  nameWithType: Transpilers.DebugLogger(IEnumerable<CodeInstruction>, String)
  fullName: HarmonyLib.Transpilers.DebugLogger(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction>, System.String)
  type: Method
  source:
    remote:
      path: Harmony/Public/Transpilers.cs
      branch: master
      repo: git@github.com:pardeike/Harmony.git
    id: DebugLogger
    path: ../Public/Transpilers.cs
    startLine: 62
  assemblies:
  - 0Harmony
  namespace: HarmonyLib
  summary: A transpiler that logs a text at the beginning of the method
  example: []
  syntax:
    content: public static IEnumerable<CodeInstruction> DebugLogger(this IEnumerable<CodeInstruction> instructions, string text)
    parameters:
    - id: instructions
      type: System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction}
      description: The instructions to act on
    - id: text
      type: System.String
      description: The log text
    return:
      type: System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction}
      description: Modified instructions
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DebugLogger(instructions As IEnumerable(Of CodeInstruction), text As String) As IEnumerable(Of CodeInstruction)
  overload: HarmonyLib.Transpilers.DebugLogger*
  nameWithType.vb: Transpilers.DebugLogger(IEnumerable(Of CodeInstruction), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: HarmonyLib.Transpilers.DebugLogger(System.Collections.Generic.IEnumerable(Of HarmonyLib.CodeInstruction), System.String)
  name.vb: DebugLogger(IEnumerable(Of CodeInstruction), String)
references:
- uid: HarmonyLib
  commentId: N:HarmonyLib
  name: HarmonyLib
  nameWithType: HarmonyLib
  fullName: HarmonyLib
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: HarmonyLib.Transpilers.MethodReplacer*
  commentId: Overload:HarmonyLib.Transpilers.MethodReplacer
  name: MethodReplacer
  nameWithType: Transpilers.MethodReplacer
  fullName: HarmonyLib.Transpilers.MethodReplacer
- uid: System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction}
  commentId: T:System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<CodeInstruction>
  nameWithType: IEnumerable<CodeInstruction>
  fullName: System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction>
  nameWithType.vb: IEnumerable(Of CodeInstruction)
  fullName.vb: System.Collections.Generic.IEnumerable(Of HarmonyLib.CodeInstruction)
  name.vb: IEnumerable(Of CodeInstruction)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: HarmonyLib.CodeInstruction
    name: CodeInstruction
    nameWithType: CodeInstruction
    fullName: HarmonyLib.CodeInstruction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: HarmonyLib.CodeInstruction
    name: CodeInstruction
    nameWithType: CodeInstruction
    fullName: HarmonyLib.CodeInstruction
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.MethodBase
  commentId: T:System.Reflection.MethodBase
  parent: System.Reflection
  isExternal: true
  name: MethodBase
  nameWithType: MethodBase
  fullName: System.Reflection.MethodBase
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: true
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: HarmonyLib.Transpilers.Manipulator*
  commentId: Overload:HarmonyLib.Transpilers.Manipulator
  name: Manipulator
  nameWithType: Transpilers.Manipulator
  fullName: HarmonyLib.Transpilers.Manipulator
- uid: System.Func{HarmonyLib.CodeInstruction,System.Boolean}
  commentId: T:System.Func{HarmonyLib.CodeInstruction,System.Boolean}
  parent: System
  definition: System.Func`2
  name: Func<CodeInstruction, Boolean>
  nameWithType: Func<CodeInstruction, Boolean>
  fullName: System.Func<HarmonyLib.CodeInstruction, System.Boolean>
  nameWithType.vb: Func(Of CodeInstruction, Boolean)
  fullName.vb: System.Func(Of HarmonyLib.CodeInstruction, System.Boolean)
  name.vb: Func(Of CodeInstruction, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: HarmonyLib.CodeInstruction
    name: CodeInstruction
    nameWithType: CodeInstruction
    fullName: HarmonyLib.CodeInstruction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: HarmonyLib.CodeInstruction
    name: CodeInstruction
    nameWithType: CodeInstruction
    fullName: HarmonyLib.CodeInstruction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{HarmonyLib.CodeInstruction}
  commentId: T:System.Action{HarmonyLib.CodeInstruction}
  parent: System
  definition: System.Action`1
  name: Action<CodeInstruction>
  nameWithType: Action<CodeInstruction>
  fullName: System.Action<HarmonyLib.CodeInstruction>
  nameWithType.vb: Action(Of CodeInstruction)
  fullName.vb: System.Action(Of HarmonyLib.CodeInstruction)
  name.vb: Action(Of CodeInstruction)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: HarmonyLib.CodeInstruction
    name: CodeInstruction
    nameWithType: CodeInstruction
    fullName: HarmonyLib.CodeInstruction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: HarmonyLib.CodeInstruction
    name: CodeInstruction
    nameWithType: CodeInstruction
    fullName: HarmonyLib.CodeInstruction
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: HarmonyLib.Transpilers.DebugLogger*
  commentId: Overload:HarmonyLib.Transpilers.DebugLogger
  name: DebugLogger
  nameWithType: Transpilers.DebugLogger
  fullName: HarmonyLib.Transpilers.DebugLogger
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
